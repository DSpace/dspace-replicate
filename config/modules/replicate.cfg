#---------------------------------------------------------------#
#--------------REPLICATION CONFIGURATIONS-----------------------#
#---------------------------------------------------------------#
# Configuration properties used solely by the replication tasks #
# In order for these configurations to be used, one or more     #
# content replication tasks should be configured/enabled in the #
# 'curate.cfg' configuration file.                              #
#---------------------------------------------------------------#

# Base directory for content replication operations
base.dir = ${dspace.dir}/replicate

# Replica store implementation class (specify one)
plugin.single.org.dspace.ctask.replicate.ObjectStore = \
    org.dspace.ctask.replicate.store.LocalObjectStore
# Object Store Options include:
#org.dspace.ctask.replicate.store.DuraCloudObjectStore - Replicate content to DuraCloud (requires 'duracloud.cfg' file to be setup)
#org.dspace.ctask.replicate.store.LocalObjectStore - Replicate content to another location (folder) on local file system
#org.dspace.ctask.replicate.store.MountableObjectStore - Replicate content to a mounted external file system (e.g. NFS mount)

### AIP Storage Settings ###

# Location of local (e.g. local, mountable, sync) object store
# ignored for non-local stores (e.g. DuraCloud)
store.dir = ${dspace.dir}/repstore

# The storage group / folder where AIPs are stored/retrieved when AIP based tasks 
# (e.g. "Transmit AIP", "Recover from AIP") are executed.
# For Local object stores, this group name corresponds to a subfolder in the 'store.dir'
# For DuraCloud object stores, this group name corresponds to a DuraCloud Space ID (Space must already exist)
group.aip.name = aips

# The storage group / folder where Checkm Manifests are stored/retrieved when Checkm Manifest 
# based tasks are executed (org.dspace.ctask.replicate.checkm.*).
# For Local object stores, this group name corresponds to a subfolder in the 'store.dir'
# For DuraCloud object stores, this group name corresponds to a DuraCloud Space ID (Space must already exist)
group.manifest.name = manifests

# The storage group / folder where AIPs are temporarily stored/retrieved when an object deletion occurs
# and the ReplicationConsumer is enabled (see below). Essentially, this 'delete' group provides a 
# location where AIPs can be temporarily kept in case the deletion needs to be reverted and the object restored.
# WARNING: THIS MUST NOT BE SET TO THE SAME VALUE AS 'group.aip.name'. If it is set to the 
# same value, then your AIP backup processes will be UNSTABLE and restoration may be difficult or impossible.
# For Local object stores, this group name corresponds to a subfolder in the 'store.dir'
# For DuraCloud object stores, this group name corresponds to a DuraCloud Space ID (Space must already exist)
group.delete.name = deletes

### AIP Packaging Settings ###

# Package type. Permitted values: 'mets', 'bagit'
# mets = Generate default DSpace AIPs as described in: https://wiki.duraspace.org/display/DSDOC18/AIP+Backup+and+Restore
# bagit = Generate AIPs based on the BagIt packaging format: https://wiki.ucop.edu/display/Curation/BagIt
packer.pkgtype = mets

# Format of package compression. Permitted values: 'zip' or 'tgz'
# for 'mets' packages, only 'zip' is supported
packer.archfmt = zip

# Whether or not the name packages with a DSpace type prefix.
# When 'true', package files are named [type]@[handle].[format] (e.g. ITEM@123456789-1.zip)
# When 'false', package files are named [handle].[format] (e.g. 123456789-1.zip)
# Defaults to 'true'. For 'mets' packages, this must be 'true'.
packer.typeprefix = true

# Package content filter - i.e. content bundles to exclude/include
# (If prepended with a "+" symbol, this is an inclusion filter. Otherwise it excludes the specified bundles)
# Syntax examples:
#   packer.cfilter = TEXT,THUMBNAIL (Excludes the listed Bundles from exported AIPs)
#   packer.cfilter = +ORIGINAL,LICENSE (*Includes* only the listed Bundles in exported AIPs)
# If you wish to include *all* bundles in AIPs, just comment out this 'packer.cfilter' setting.
# By default we are excluding Extracted Text & Thumbnails from AIPs, as these can always be regenerated.
packer.cfilter = TEXT,THUMBNAIL

###  ReplicateConsumer settings ###
# ReplicateConsumer must be properly declared/configured in dspace.cfg
# All tasks defined will be queued, unless the '+p' suffix is appended, when
# they will be immediately performed. Exercise considerable caution when using
# +p, as lengthy tasks can adversely affect UI or other responsiveness. 

# Replicate event consumer tasks upon install/add events.
# A comma separated list of valid task plugin names (with optional '+p' suffix)
consumer.tasks.add = transmitaip

# Replicate event consumer tasks upon modification events.
# A comma separated list of valid task plugin names (with optional '+p' suffix)
consumer.tasks.mod = transmitaip

# Replicate event consumer tasks upon a delete/remove events.
# A comma separated list of valid task plugin names (with optional '+p' suffix)
consumer.tasks.del = catalog+p

# Replicate event consumer queue name - where all queued tasks are placed
consumer.queue = replication

###  Checkm Manifest Validation settings ###
# These settings are used by the the 'Checkm' Manifest tasks 
# (org.dspace.ctask.replicate.checkm.*)
# For more information on Checkm, see: 
# http://www.cdlib.org/uc3/docs/checkmspec.html

# Template for Checkm manifest
checkm.template = id|md5|csm|length

